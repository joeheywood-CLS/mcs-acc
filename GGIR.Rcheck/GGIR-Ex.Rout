
R version 3.3.0 (2016-05-03) -- "Supposedly Educational"
Copyright (C) 2016 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "GGIR"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> base::assign(".ExTimings", "GGIR-Ex.timings", pos = 'CheckExEnv')
> base::cat("name\tuser\tsystem\telapsed\n", file=base::get(".ExTimings", pos = 'CheckExEnv'))
> base::assign(".format_ptime",
+ function(x) {
+   if(!is.na(x[4L])) x[1L] <- x[1L] + x[4L]
+   if(!is.na(x[5L])) x[2L] <- x[2L] + x[5L]
+   options(OutDec = '.')
+   format(x[1L:3L], digits = 7L)
+ },
+ pos = 'CheckExEnv')
> 
> ### * </HEADER>
> library('GGIR')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("GGIR-package")
> ### * GGIR-package
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: GGIR-package
> ### Title: A package to process multi-day raw accelerometer data
> ### Aliases: GGIR-package GGIR
> 
> ### ** Examples
> 
> ## Not run: 
> ##D   #inspect file:
> ##D   I = g.inspectfile(datafile)
> ##D   
> ##D   #autocalibration:
> ##D   C = g.calibrate(datafile)
> ##D   
> ##D   #get meta-data:
> ##D   M = g.getmeta(datafile)
> ## End(Not run)
> data(data.getmeta)
> data(data.inspectfile)
> data(data.calibrate)
> 
> #impute meta-data:
> IMP = g.impute(M = data.getmeta, I = data.inspectfile)
> #analyse and produce summary:
> A = g.analyse(I = data.inspectfile, C = data.calibrate, M = data.getmeta, IMP)
> #plot data
> g.plot(IMP, M = data.getmeta, I = data.inspectfile, durplot=4)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("GGIR-package", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("data.calibrate")
> ### * data.calibrate
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: data.calibrate
> ### Title: Example output from g.calibrate
> ### Aliases: data.calibrate
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(data.calibrate)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("data.calibrate", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("data.getmeta")
> ### * data.getmeta
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: data.getmeta
> ### Title: Example output from g.getmeta
> ### Aliases: data.getmeta
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(data.getmeta)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("data.getmeta", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("data.inspectfile")
> ### * data.inspectfile
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: data.inspectfile
> ### Title: Example output from g.inspectfile
> ### Aliases: data.inspectfile
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(data.inspectfile)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("data.inspectfile", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("g.analyse")
> ### * g.analyse
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: g.analyse
> ### Title: function to analsyse meta-data generated by g.getmeta and
> ###   g.impute
> ### Aliases: g.analyse
> 
> ### ** Examples
> 
> data(data.getmeta)
> data(data.inspectfile)
> data(data.calibrate)
> ## Not run: 
> ##D   #inspect file:
> ##D   I = g.inspectfile(datafile)
> ##D   
> ##D   #autocalibration:
> ##D   C = g.calibrate(datafile) 
> ##D   
> ##D   #get meta-data:
> ##D   M = g.getmeta(datafile, desiredtz = "Europe/London", windowsizes = c(5, 900, 3600),
> ##D   daylimit = FALSE, offset = c(0, 0, 0), scale = c(1, 1, 1), tempoffset = c(0, 0, 0))
> ## End(Not run)
> 
> 
> #impute meta-data:
> IMP = g.impute(M = data.getmeta, I = data.inspectfile)
> 
> #analyse and produce summary:
> A = g.analyse(I = data.inspectfile, C = data.calibrate, M = data.getmeta, IMP)
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("g.analyse", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("g.calibrate")
> ### * g.calibrate
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: g.calibrate
> ### Title: function to estimate calibration error and make recommendation
> ###   for addressing it
> ### Aliases: g.calibrate
> 
> ### ** Examples
> 
> ## Not run: 
> ##D datafile = "C:/myfolder/testfile.bin"
> ##D 
> ##D #Apply autocalibration:
> ##D C = g.calibrate(datafile)
> ##D print(C$scale)
> ##D print(C$offset)
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("g.calibrate", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("g.getmeta")
> ### * g.getmeta
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: g.getmeta
> ### Title: function to extract meta-data (features) from data in
> ###   accelerometer file
> ### Aliases: g.getmeta
> 
> ### ** Examples
> 
> ## Not run: 
> ##D datafile = "C:/myfolder/testfile.bin"
> ##D 
> ##D #Extract meta-data:
> ##D M = g.getmeta(datafile)
> ##D 
> ##D #Inspect first couple of rows of long epoch length meta data:
> ##D print(M$metalong[1:5,])
> ##D 
> ##D #Inspect first couple of rows of short epoch length meta data:
> ##D print(M$metalong[1:5,])
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("g.getmeta", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("g.impute")
> ### * g.impute
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: g.impute
> ### Title: function to identify invalid periods in the meta-data as
> ###   generated by g.getmeta and to impute these invalid periods with the
> ###   average of similar timepoints on other days of the measurement
> ### Aliases: g.impute
> 
> ### ** Examples
> 
> ## Not run: 
> ##D   #inspect file:
> ##D   I = g.inspectfile(datafile)
> ##D   
> ##D   #autocalibration:
> ##D   C = g.calibrate(datafile) 
> ##D   
> ##D   #get meta-data:
> ##D   M = g.getmeta(datafile)
> ## End(Not run)
> 
> data(data.getmeta)
> data(data.inspectfile)
> 
> #impute meta-data:
> IMP = g.impute(M=data.getmeta, I=data.inspectfile)
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("g.impute", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("g.part1")
> ### * g.part1
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: g.part1
> ### Title: function to load and pre-process acceleration files
> ### Aliases: g.part1
> 
> ### ** Examples
> 
> ## Not run: 
> ##D datafile = "C:/myfolder/mydata"
> ##D outputdir = "C:/myresults"
> ##D g.part1(datadir,outputdir)
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("g.part1", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("g.part2")
> ### * g.part2
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: g.part2
> ### Title: function to analyse and summarize pre-processed output from
> ###   g.part1
> ### Aliases: g.part2
> 
> ### ** Examples
> 
> ## Not run: 
> ##D metadatadir = "C:/myresults/output_mystudy"
> ##D g.part2(metadatadir)
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("g.part2", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("g.part3")
> ### * g.part3
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: g.part3
> ### Title: Detection of sustained inactivity periods as needed for sleep
> ###   detection in g.part4.
> ### Aliases: g.part3
> 
> ### ** Examples
> 
> ## Not run: 
> ##D metadatadir = "C:/myfolder/meta" # assumes that there is a subfolder in
> ##D # metadatadir named 'basic' containing the output from g.part1
> ##D g.part3(metadatadir=metadatadir,anglethreshold=5,timethreshold=5,overwrite=FALSE)
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("g.part3", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("g.part4")
> ### * g.part4
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: g.part4
> ### Title: Labels detected sustained inactivity periods by g.part3 as
> ###   either nocturnal sleep or daytime sustained inactivity
> ### Aliases: g.part4
> 
> ### ** Examples
> 
> ## Not run: 
> ##D metadatadir = "C:/myfolder/meta" # assumes that there is a subfolder in
> ##D # metadatadir named 'ms3.out' containing the output from g.part3
> ##D g.part4(metadatadir=metadatadir)
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("g.part4", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("g.plot")
> ### * g.plot
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: g.plot
> ### Title: function to generate a plot for quality check purposes
> ### Aliases: g.plot
> 
> ### ** Examples
> 
> ## Not run: 
> ##D   #inspect file:
> ##D   I = g.inspectfile(datafile)
> ##D   
> ##D   #autocalibration:
> ##D   C = g.calibrate(datafile) 
> ##D   
> ##D   #get meta-data:
> ##D   M = g.getmeta(datafile)
> ## End(Not run)
> data(data.getmeta)
> data(data.inspectfile)
> 
> #impute meta-data:
> IMP = g.impute(M = data.getmeta, I = data.inspectfile, strategy = 1,
+ hrs.del.start = 0, hrs.del.end = 0, maxdur = 0)
> 
> #plot data
> g.plot(IMP, M = data.getmeta, I = data.inspectfile, durplot=4)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("g.plot", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("g.shell.GGIR")
> ### * g.shell.GGIR
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: g.shell.GGIR
> ### Title: Shell function for analysing a accelerometer dataset.
> ### Aliases: g.shell.GGIR
> 
> ### ** Examples
> 
> ## Not run: 
> ##D mode= c(1,2,3,4)
> ##D datadir= "C:/myfolder/mydata"
> ##D outputdir= "C:/myresults"
> ##D studyname="test"
> ##D f0 = 1 
> ##D f1 = 2
> ##D g.shell.GGIR(#-------------------------------
> ##D              # General parameters
> ##D              #-------------------------------
> ##D              mode=mode, 
> ##D              datadir=datadir, 
> ##D              outputdir=outputdir, 
> ##D              studyname=studyname, 
> ##D              f0=f0, 
> ##D              f1=f1, 
> ##D              overwrite = FALSE, 
> ##D              do.imp=TRUE,
> ##D              idloc=1, 
> ##D              print.filename=FALSE,
> ##D              storefolderstructure = FALSE,
> ##D              #-------------------------------
> ##D              # Part 1 parameters:
> ##D              #-------------------------------
> ##D              windowsizes = c(5,900,3600),
> ##D              do.cal=TRUE, 
> ##D              do.enmo = TRUE,
> ##D              do.anglez=TRUE,
> ##D              chunksize=1,
> ##D              printsummary=TRUE,
> ##D              #-------------------------------
> ##D              # Part 2 parameters:
> ##D              #-------------------------------
> ##D              strategy = 1,
> ##D              ndayswindow=7,
> ##D              hrs.del.start = 1,
> ##D              hrs.del.end = 1, 
> ##D              maxdur = 9,
> ##D              includedaycrit = 16, 
> ##D              L5M5window = c(0,24),
> ##D              M5L5res = 10,
> ##D              winhr = c(5,10),
> ##D              qlevels = c(c(1380/1440),c(1410/1440)),
> ##D              qwindow=c(0,24), 
> ##D              ilevels = c(seq(0,400,by=50),8000), 
> ##D              mvpathreshold =c(100,120),
> ##D              #-------------------------------
> ##D              # Part 3 parameters:
> ##D              #-------------------------------
> ##D              timethreshold= c(5,10),
> ##D              anglethreshold=5,
> ##D              ignorenonwear = TRUE,
> ##D              #-------------------------------
> ##D              # Part 4 parameters:
> ##D              #-------------------------------
> ##D              excludefirstlast = TRUE,
> ##D              includenightcrit = 16,
> ##D              def.noc.sleep = c(),
> ##D              loglocation= "D:/sleeplog.csv",
> ##D              outliers.only = FALSE,
> ##D              criterror = 4,
> ##D              relyonsleeplog = FALSE,
> ##D              sleeplogidnum = TRUE,
> ##D              colid=1, 
> ##D              coln1=2, 
> ##D              do.visual = TRUE,
> ##D              nnights = 9,
> ##D              #-----------------------------------
> ##D              # Report generation
> ##D              #-------------------------------
> ##D              do.report=c(2,4))
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("g.shell.GGIR", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> ### * <FOOTER>
> ###
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  7.129 0.147 7.351 0 0.012 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
